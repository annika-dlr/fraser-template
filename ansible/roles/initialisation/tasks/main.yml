#!/usr/bin/env pythonNone
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, German Aerospace Center (DLR)
#
# This file is part of the development version of FRASER.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Authors:
# - 2017-2018, Annika Ofenloch (DLR RY-AVS)

---
  # ---------------------------------------------------------
  # Initialize and Dissolve dependencies
  # ---------------------------------------------------------
- name: Check if folders exists
  file: path="{{ item }}" state=directory
  loop:
    - "../models"
    - "../configurations"          
    - "../fraser"

  # Create folders if they not exist
- name: Check if resource/idl folders exists
  file: path="{{ item.path }}/resources/idl" state=directory
  loop: "{{ models }}"
  when: 'not "configuration_server" in item.instances'

  # -------------------------------------------------------
  # All models have all available IDLs of the other models.
  # -------------------------------------------------------
- name: Dissolve event-data dependencies between the models (fbs-files)
  copy:
    src: "{{ item.1.path }}/resources/idl/"
    dest: "{{ item.0.path }}/resources/idl/"
  with_nested:
    - "{{ models }}"
    - "{{ models }}"
  when:
    - 'not "configuration_server" in item.0.instances'
    - 'not "configuration_server" in item.1.instances'

- name: Find Flatbuffers files ending with .fbs
  find:
    paths: ../models
    patterns: "*.fbs"
    recurse: yes
  register: fbsfiles

- name: Copy default event (fbs-file) to the models
  copy:
    src: "../resources/idl/event.fbs"
    dest: "{{ item.path }}/resources/idl/"
  loop: "{{ models }}"
  when: 'not "configuration_server" in item.instances'

- name: Include specific eventdata-fbs into default event-fbs
  lineinfile:
    path: "{{ item[0].path }}/resources/idl/event.fbs"
    insertafter: "// event.fbs"
    line: 'include "{{ item[1].path | basename }}";'
  when:
    - item[1].path is search(item[0].path)
    - 'not "configuration_server" in item[0].instances'
    - (item[1].path | basename) != "event.fbs"
  with_nested:
    - "{{ models }}"
    - "{{ fbsfiles.files }}"
    
- name: Read fbs-data files
  command: python3.6 ../fraser/scripts/fbsDataReader.py -f {{ item.path }}
  loop: "{{ fbsfiles.files }}"
  when: (item.path | basename) != "event.fbs"
  register: datanames
  changed_when: False
    
- name: Add specific eventdata-fbs to union type of default event-fbs
  lineinfile:
    path: "{{ item[0].path }}/resources/idl/event.fbs"
    insertafter: "String:string,"
    line: '{{ item[1].stdout }},'
  when:
    - item[1].item.path is search(item[0].path)
    - 'not "configuration_server" in item[0].instances'
    - item[1].stdout is defined
  with_nested:
    - "{{ models }}"
    - "{{ datanames.results }}"
  
  # -------------------------------------------------------
  # Generate C++ headers from the flatbuffers
  # -------------------------------------------------------
- name: Find Flatbuffers files ending with .fbs
  find:
    paths: ../models
    patterns: "*.fbs"
    recurse: yes
  register: fbs_files

- name: Generate C++ headers to access and construct serialized events
  command: flatc -o {{ item.path | dirname }} --cpp {{ item.path }}
  loop: "{{ fbs_files.files }}"
  changed_when: False